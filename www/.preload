

-- Setup connection to SMQ hub
local smq = require("smq.hub").create()
smq:create("eventlog")
smq:create("ess")
smq:create("qpcs")
smq:create("action")
smq:create("xterm_command")
smq:create("error")
smq:create("print")

local function smqEntry(_ENV)
   --trace("New SMQ client")
   smq:connect(request)
end

local smqDir = ba.create.dir("QPCSBroker")
smqDir:setfunc(smqEntry)
smqDir:insert()
print("Installing broker entry at:",smqDir:baseuri())

if app.mySmqBrokerDir then
   print"Removing old broker"
   app.mySmqBrokerDir:unlink()
end
app.mySmqBrokerDir = smqDir


-- require "lfs"

-- -- Start getting file names functionality

-- local function dirtree(dir)
--     assert(dir and dir ~= "", "Please pass directory parameter")
--     if string.sub(dir, -1) == "/" then
--         dir=string.sub(dir, 1, -2)
--     end

--     local function yieldtree(dir)
--         for entry in lfs.dir(dir) do
--             if entry ~= "." and entry ~= ".." then
--                 entry=dir.."/"..entry
--                 local attr=lfs.attributes(entry)
--                 coroutine.yield(entry,attr)
--                 if attr.mode == "directory" then
--                     yieldtree(entry)
--                 end
--             end
--         end
--     end

--     return coroutine.wrap(function() yieldtree(dir) end)
-- end

-- local function send_file_names()
    
--     for filename, attr in dirtree("./www/public/") do
--         smq:publish(filename, "file_names_response")
--     end
-- end

-- -- End getting file names functionality

-- smq:subscribe("file_names_request", {onmsg=send_file_names})

-- local io = require "io"



-- local function overwrite_file_content(msg, ftid)
--     -- Open the file in write mode
--     local file = io.open("www/public/" .. msg.fileName, "w+")
    
--     if file then
--         -- Write the content to the file
--         file:write(msg.code)
        
--         -- Close the file
--         file:close()
--         print("File overwritten successfully.")
--     else
--         -- Print an error message if the file couldn't be opened
--         print("Error: Unable to open the file for writing")
--     end
-- end

-- smq:subscribe("file_overwrite_request", {onmsg=overwrite_file_content, json=true})

local su=require"sqlutil" -- Load SQL utility library
if not su.exist"file" then
   -- Create a database environment object and open data/file.sqlite.db
   local env,conn = su.open"file"
   conn:execute"CREATE TABLE scripts (key INTEGER PRIMARY KEY, fileName TEXT, content TEXT, filePath TEXT)"
   su.close(env,conn)
end


if not su.exist"config" then
    -- Create a database environment object and open data/config.sqlite.db
    local env,conn = su.open"config"
    conn:execute"CREATE TABLE configs (key INTEGER PRIMARY KEY, fileType TEXT, setting1 TEXT, setting2 TEXT)"
    su.close(env,conn)
 end

-- Start getting file names functionality

local function send_file_names()
    local env,conn = su.open"file"
    local function execute(cur) -- su.select() callback function
        local key, fileName, filePath = cur:fetch()
        while key do
            local script = {key = key, fileName= fileName,filePath= filePath}
            smq:publish(ba.json.encode(script), "file_names_response")
            key, fileName, filePath = cur:fetch()
        end
    end

    su.select(conn,"key,fileName,filePath FROM scripts",execute)
    su.close(env,conn)
end

-- End getting file names functionality

smq:subscribe("file_names_request", {onmsg=send_file_names})

local function send_file_content(msg, ftid)

    local env,conn = su.open"file"
    local function execute(cur) -- su.select() callback function
        local key, content, fileName = cur:fetch()
        
        while key do
            if key == msg.key then 
                local script = {key= key, code= content, fileName = fileName}
                
                smq:publish(ba.json.encode(script), "file_content_response")
                break 
            end
            
            key,content,fileName = cur:fetch()
        end
    end
    su.select(conn,"key,content,fileName FROM scripts",execute)
    su.close(env,conn)
end

smq:subscribe("file_content_request", {onmsg=send_file_content, json=true})

local function insert_data(msg, ftid)
    local fileName=luasql.quotestr(msg.fileName)-- Quote msg and prevent SQL injection by escaping any ' characters
    local content=luasql.quotestr(msg.content)
    local filePath=luasql.quotestr(msg.filePath)
    local sql=string.format("INSERT INTO scripts (fileName, content, filePath) values(%s, %s, %s)",fileName, content, filePath)
    local env,conn = su.open"file"
    local ok,err=conn:execute(sql) -- Insert msg into database
    if ok then 
        print("Data inserted!")     
    else
        trace("Inserting DB failed",err)
    end
    su.close(env,conn)
end

smq:subscribe("insert_data_request", {onmsg=insert_data, json=true})

local function insert_config_data(msg, ftid)
    local fileName=luasql.quotestr(msg.fileName)-- Quote msg and prevent SQL injection by escaping any ' characters
    local content=luasql.quotestr(msg.content)
    local filePath=luasql.quotestr(msg.filePath)
    local sql=string.format("INSERT INTO configs (fileName, content, filePath) values(%s, %s, %s)",fileName, content, filePath)
    local env,conn = su.open"config"
    local ok,err=conn:execute(sql) -- Insert msg into database
    if ok then 
        print("Data inserted!")     
    else
        trace("Inserting DB failed",err)
    end
    su.close(env,conn)
end

smq:subscribe("insert_data_request", {onmsg=insert_config_data, json=true})


local function overwrite_file_content(msg, ftid)

   local env,conn = su.open"file"
   local sql=string.format("UPDATE scripts SET content = '%s' WHERE key = '%s'", msg.code, msg.key)
   local ok,err=conn:execute(sql) -- Insert msg into database
   if ok then 
       print("Code modified!")     
   else
       trace("Code modification failed",err)
   end
   su.close(env,conn)
end

smq:subscribe("file_overwrite_request", {onmsg=overwrite_file_content, json=true})

local function evaluate_script(msg, ftid)
    local consoleOutput = {output = msg.code}
    smq:publish(ba.json.encode(consoleOutput), "console_output")
    print("script run successful!")
 end
 
smq:subscribe("run_script_request", {onmsg=evaluate_script, json=true})

local io = require "io"

local function evaluate_command(msg, ftid)
    
    -- Define the file to save the output
    local output_file = "output.txt"

    -- Execute the shell command and redirect the output to the file
    os.execute(msg .. " > " .. output_file)

    -- Open the file for reading
    local file = io.open(output_file, "r")

    if file then
        print("command evaluated")
        -- Read the contents of the file into a variable
        local consoleOutput = {output = file:read("*all")}
        smq:publish(ba.json.encode(consoleOutput), "console_output")
        file:close()
    else
        print("Failed to open file: " .. input_file)
    end
end
 
smq:subscribe("evaluate_command_request", {onmsg=evaluate_command})

local json = require('cjson')

local function send_nav_names(msg, ftid)

    -- Open the file in read mode

    local file = io.open("www/public/nav_data.json", "r")

    if file then
        -- Read the contents of the file
        local content = file:read("*all")
   
        
        smq:publish(ba.json.encode(json.decode(content)), "nav_items_response")
        
        -- Close the file
        file:close()
    else
        -- Print an error message if the file couldn't be opened
        print("Error: Unable to open the file")
    end
end

smq:subscribe("nav_names_request", {onmsg=send_nav_names})


local function send_parameters(msg, ftid)

    -- Open the file in read mode

    local file = io.open("www/public/control_data.json", "r")

    if file then
        -- Read the contents of the file
        local content = file:read("*all")
   
        
        smq:publish(ba.json.encode(json.decode(content)), "parameters_response")
        
        -- Close the file
        file:close()
    else
        -- Print an error message if the file couldn't be opened
        print("Error: Unable to open the file")
    end
end

smq:subscribe("parameters_request", {onmsg=send_parameters})



